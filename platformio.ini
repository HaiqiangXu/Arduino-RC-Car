; PlatformIO Project Configuration File
; http://docs.platformio.org/page/projectconf.html

[platformio]
; set 1 of the 5 following environments to compile and upload to the desired context.
; env:RCC_Bekir needs to be created when project is implemented. RRCTest_Car for now tests Car Able
env_default = RCC_Able ; RCC_Controller , RRCTest_Controller , RRCTest_Car , RCC_Able ; RRCLibTest_Bluetooth
lib_extra_dirs = ../Arduino-Generic-Libraries/external-libs, ../Arduino-Generic-Libraries/lib

; for final Able Car running on Arduino UNO
[env:RCC_Able]
platform = atmelavr
board = uno
framework = arduino
; src_filter =  +<*> -<.git/> -<lib/RCC_Bekir> -<lib/RCC_Controller> -<lib/RRCTest_Car> -<lib/RRCTest_Controller>
build_flags = -DRCC_ABLE

; for final Remote Controller running on Arduino NANO
[env:RCC_Controller]
platform = atmelavr
board = nanoatmega328
framework = arduino
build_flags = -DRCC_CONTROLLER ;-Wno-error=unknown-pragmas

; same as RCC_Controller with additional serial monitoring for testing and debug
[env:RRCTest_Controller]
platform = atmelavr
board = nanoatmega328
framework = arduino
build_flags = -DTEST_CONTROLLER

; same as RCC_Car [for now, Able] with additional serial monitoring for testing and debug
[env:RRCTest_Car]
platform = atmelavr
board = uno
framework = arduino
build_flags = -DTEST_CAR

; for testing with serial monitoring the BT's AT commands running on Arduino UNO or NANO
[env:RRCLibTest_Bluetooth]
platform = atmelavr
board = uno ; uno , nanoatmega328
framework = arduino
build_flags = -DTEST_BT_UNO ; -DTEST_BT_UNO , -DTEST_BT_NANO
